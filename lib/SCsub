Import('*')

#add the include directories for each libray to the CPPPATH
env.Append(CPPPATH = ['#lib/lua-5.3.3', '#lib/stb', '#lib/glfw-3.2.1/include', '#lib/glad/include', '#lib/glm', '#lib/enet-1.3.13/include'])

module_targets = dict()
#lua is very nice to build
module_targets['lua'] = env.Library(target = env.set_target('lib/liblua.a'), source = Glob('lua-5.3.3/lua/*.c'), CFLAGS = ['-std=gnu99', '-O3', '-Wall', '-DLUA_COMPAT_5_2'])

#so is glad
module_targets['glad'] = env.Library(target = env.set_target('lib/libglad.a'), source = 'glad/glad.c', CFLAGS = ['-O3'])

#glfw config (only compiling wayland files for now will worry about other platforms later)
glfw_sources_in = ['context.c', 'init.c', 'input.c', 'linux_joystick.c', 'monitor.c', 'posix_time.c', 'posix_tls.c', 'vulkan.c', 'window.c', 'egl_context.c',
'wl_init.c', 'wl_monitor.c', 'wl_window.c', 'xkb_unicode.c', 'wayland-relative-pointer-unstable-v1-protocol.c', 'wayland-pointer-constraints-unstable-v1-protocol.c']
glfw_sources = ['glfw-3.2.1/src/' + name for name in glfw_sources_in]

#standard c flags plus the macro to tell glfw that we will be using wayland
glfw_flags = ['-O3', '-Wall', '-DNDEBUG', '-D_GLFW_WAYLAND']
module_targets['glfw'] = env.Library(target = env.set_target('lib/libglfw3.a'), source = glfw_sources, CFLAGS = glfw_flags)

#and finally enet
enet_sources_in = ['callbacks.c', 'compress.c', 'host.c', 'list.c', 'packet.c', 'peer.c', 'protocol.c', 'unix.c']
enet_sources = ['enet-1.3.13/' + name for name in enet_sources_in]
enet_flags = ['-O3', '-DPACKAGE_NAME=\"libenet\"',  '-DPACKAGE_TARNAME=\"libenet\"', '-DPACKAGE_VERSION=\"1.3.13\"', '-DPACKAGE_STRING=\"libenet\ 1.3.13\"', '-DPACKAGE_BUGREPORT=\"\"', '-DPACKAGE_URL=\"\"', '-DPACKAGE=\"libenet\"', '-DVERSION=\"1.3.13\"', '-DSTDC_HEADERS=1', '-DHAVE_SYS_TYPES_H=1', '-DHAVE_SYS_STAT_H=1', '-DHAVE_STDLIB_H=1', '-DHAVE_STRING_H=1', '-DHAVE_MEMORY_H=1', '-DHAVE_STRINGS_H=1', '-DHAVE_INTTYPES_H=1', '-DHAVE_STDINT_H=1', '-DHAVE_UNISTD_H=1', '-DHAVE_DLFCN_H=1', '-DLT_OBJDIR=\".libs/\"', '-DHAS_GETHOSTBYADDR_R=1', '-DHAS_GETHOSTBYNAME_R=1', '-DHAS_POLL=1', '-DHAS_FCNTL=1', '-DHAS_INET_PTON=1', '-DHAS_INET_NTOP=1', '-DHAS_MSGHDR_FLAGS=1', '-DHAS_SOCKLEN_T=1']

module_targets['enet'] = env.Library(target = env.set_target('lib/libenet.a'), source = enet_sources, CFLAGS = enet_flags)

Return('module_targets')